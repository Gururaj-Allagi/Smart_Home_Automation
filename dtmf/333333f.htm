<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [C:\2015-Projects\2015-PROJECTS\DEC033\333333f.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image C:\2015-Projects\2015-PROJECTS\DEC033\333333f.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, RVCT4.0 [Build 728]: Last Updated: Fri Mar 13 20:49:00 2015
<BR><P>
<H3>Maximum Stack Usage =         72 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
_printf_d &rArr; _printf_int_dec &rArr; _printf_int_common
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[d8f568]">Reset_Handler</a>
 <LI><a href="#[d8f5a4]">__user_initial_stackheap</a>
 <LI><a href="#[d8f7c0]">Undef_Handler</a>
 <LI><a href="#[d8f784]">SWI_Handler</a>
 <LI><a href="#[d8f748]">PAbt_Handler</a>
 <LI><a href="#[d8f70c]">DAbt_Handler</a>
 <LI><a href="#[d8f6d0]">IRQ_Handler</a>
 <LI><a href="#[d8f694]">FIQ_Handler</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[d8f7c0]">Undef_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[d8f7c0]">Undef_Handler</a><BR>
 <LI><a href="#[d8f784]">SWI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[d8f784]">SWI_Handler</a><BR>
 <LI><a href="#[d8f748]">PAbt_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[d8f748]">PAbt_Handler</a><BR>
 <LI><a href="#[d8f70c]">DAbt_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[d8f70c]">DAbt_Handler</a><BR>
 <LI><a href="#[d8f6d0]">IRQ_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[d8f6d0]">IRQ_Handler</a><BR>
 <LI><a href="#[d8f694]">FIQ_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[d8f694]">FIQ_Handler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[d8f568]">Reset_Handler</a>
 <LI><a href="#[d8f7c0]">Undef_Handler</a>
 <LI><a href="#[d8f784]">SWI_Handler</a>
 <LI><a href="#[d8f748]">PAbt_Handler</a>
 <LI><a href="#[d8f70c]">DAbt_Handler</a>
 <LI><a href="#[d8f6d0]">IRQ_Handler</a>
 <LI><a href="#[d8f694]">FIQ_Handler</a>
 <LI><a href="#[d8ba94]">__main</a>
 <LI><a href="#[d8e6e0]">main</a>
 <LI><a href="#[d8b440]">_sputc</a>
 <LI><a href="#[d8b5a8]">_printf_input_char</a>
 <LI><a href="#[d87174]">__I$use$semihosting</a>
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[d8f568]"></a>Reset_Handler</STRONG> (ARM, 0 bytes, Stack size unknown bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[d8ba94]"></a>__main</STRONG> (ARM, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[d84bf4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
<LI><a href="#[d8b968]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[d84bf4]"></a>__scatterload</STRONG> (ARM, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[d8ba94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[d84bb8]"></a>__scatterload_rt2</STRONG> (ARM, 52 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d8b968]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[d84b7c]"></a>__scatterload_null</STRONG> (ARM, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[d849d8]"></a>__scatterload_copy</STRONG> (ARM, 40 bytes, Stack size unknown bytes, __scatter_copy.o(!!handler_copy), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d849d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[d849d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>

<P><STRONG><a name="[d848e8]"></a>__scatterload_zeroinit</STRONG> (ARM, 44 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[d8c0ac]"></a>_printf_d</STRONG> (ARM, 0 bytes, Stack size unknown bytes, _printf_d.o(.ARM.Collect$$_printf_percent$$00000009))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_d &rArr; _printf_int_dec &rArr; _printf_int_common
</UL>
<BR>[Calls]<UL><LI><a href="#[d8cac0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec (via Veneer)
</UL>

<P><STRONG><a name="[d8bff8]"></a>_printf_percent</STRONG> (ARM, 0 bytes, Stack size unknown bytes, _printf_percent.o(.ARM.Collect$$_printf_percent$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[d8cc28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf (via Veneer)
</UL>

<P><STRONG><a name="[d8b38c]"></a>_printf_percent_end</STRONG> (ARM, 0 bytes, Stack size unknown bytes, _printf_percent_end.o(.ARM.Collect$$_printf_percent$$00000017))

<P><STRONG><a name="[d8a39c]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init &rArr; _fp_init
</UL>
<BR>[Calls]<UL><LI><a href="#[d881dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_init (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[d8af54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li (via Veneer)
</UL>

<P><STRONG><a name="[d8886c]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002A))

<P><STRONG><a name="[d888e4]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000028))

<P><STRONG><a name="[d88ca4]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[d88b3c]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[d8877c]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[d887f4]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[d88bb4]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[d88ac4]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[d890a0]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000006))

<P><STRONG><a name="[d88efc]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000D))

<P><STRONG><a name="[d88e84]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000F))

<P><STRONG><a name="[d88e0c]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[d88d94]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[d88d1c]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[d88fb0]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[d88740]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002F))

<P><STRONG><a name="[d88c2c]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[d88a4c]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[d89028]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000008))

<P><STRONG><a name="[d874bc]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[d87f84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls (via Veneer)
</UL>

<P><STRONG><a name="[d86850]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000006))

<P><STRONG><a name="[d86670]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000E))

<P><STRONG><a name="[d86634]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000F))

<P><STRONG><a name="[d8679c]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000009))

<P><STRONG><a name="[d86904]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000003))

<P><STRONG><a name="[d86724]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000B))

<P><STRONG><a name="[d8b968]"></a>__rt_entry</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[d84bb8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
<LI><a href="#[d8ba94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[d8b008]"></a>__rt_entry_presh_1</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[d8ac84]"></a>__rt_entry_sh</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[d8a900]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[d8af54]"></a>__rt_entry_li</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_li &rArr; __rt_lib_init &rArr; _fp_init
</UL>
<BR>[Calls]<UL><LI><a href="#[d8a39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init (via Veneer)
</UL>

<P><STRONG><a name="[d8af90]"></a>__rt_entry_postsh_1</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[d8aea0]"></a>__rt_entry_main</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Calls]<UL><LI><a href="#[d8a798]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit (via BX)
</UL>

<P><STRONG><a name="[d8aedc]"></a>__rt_entry_postli_1</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[d89c1c]"></a>__rt_exit</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[d8a798]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit (via Veneer)
</UL>

<P><STRONG><a name="[d87f84]"></a>__rt_exit_ls</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[d874bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown (via Veneer)
</UL>

<P><STRONG><a name="[d87fc0]"></a>__rt_exit_prels_1</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[d87f48]"></a>__rt_exit_exit</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[d879a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[d8f5a4]"></a>__user_initial_stackheap</STRONG> (ARM, 0 bytes, Stack size unknown bytes, startup.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d8a900]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[d8ea28]"></a>motor_stop</STRONG> (ARM, 72 bytes, Stack size 0 bytes, main.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d8e6e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[d8e9ec]"></a>motor_F</STRONG> (ARM, 72 bytes, Stack size 0 bytes, main.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d8e6e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[d8e9b0]"></a>motor_RE</STRONG> (ARM, 72 bytes, Stack size 0 bytes, main.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d8e6e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[d8e974]"></a>motor_L</STRONG> (ARM, 72 bytes, Stack size 0 bytes, main.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d8e6e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[d8e938]"></a>motor_R</STRONG> (ARM, 72 bytes, Stack size 0 bytes, main.o(.text), UNUSED)

<P><STRONG><a name="[d8e8fc]"></a>recvResponse</STRONG> (ARM, 68 bytes, Stack size 16 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = recvResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[d8e26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart1_getkey
</UL>
<BR>[Called By]<UL><LI><a href="#[d8e6a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gprs_intil
<LI><a href="#[d8e80c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;deleteSms
<LI><a href="#[d8e884]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendSMS
<LI><a href="#[d8e8c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intGsm
</UL>

<P><STRONG><a name="[d8e8c0]"></a>intGsm</STRONG> (ARM, 108 bytes, Stack size 16 bytes, main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d8e1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart1_puts
<LI><a href="#[d8e1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart1_putc
<LI><a href="#[d8e500]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay
<LI><a href="#[d8e8fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recvResponse
</UL>

<P><STRONG><a name="[d8e884]"></a>sendSMS</STRONG> (ARM, 196 bytes, Stack size 32 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = sendSMS &rArr; recvResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[d8e1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart1_puts
<LI><a href="#[d8e1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart1_putc
<LI><a href="#[d8e26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart1_getkey
<LI><a href="#[d8e8fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recvResponse
</UL>
<BR>[Called By]<UL><LI><a href="#[d8e6a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gprs_intil
<LI><a href="#[d8e6e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[d8e794]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_adc1
</UL>

<P><STRONG><a name="[d8e848]"></a>getSMS</STRONG> (ARM, 624 bytes, Stack size 16 bytes, main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d8e1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart1_puts
<LI><a href="#[d8e26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart1_getkey
</UL>
<BR>[Called By]<UL><LI><a href="#[d8e668]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recivecontr
</UL>

<P><STRONG><a name="[d8e80c]"></a>deleteSms</STRONG> (ARM, 52 bytes, Stack size 24 bytes, main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d8e1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart1_puts
<LI><a href="#[d8e8fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recvResponse
</UL>
<BR>[Called By]<UL><LI><a href="#[d8e668]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recivecontr
</UL>

<P><STRONG><a name="[d8e7d0]"></a>putSLcd</STRONG> (ARM, 40 bytes, Stack size 8 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = putSLcd &rArr; lcd_data_write &rArr; wait_lcd
</UL>
<BR>[Calls]<UL><LI><a href="#[d8e410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_data_write
</UL>
<BR>[Called By]<UL><LI><a href="#[d8e668]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recivecontr
<LI><a href="#[d8e6a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gprs_intil
<LI><a href="#[d8e6e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[d8e794]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_adc1
</UL>

<P><STRONG><a name="[d8e794]"></a>process_adc1</STRONG> (ARM, 608 bytes, Stack size 40 bytes, main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d8bddc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy (via Veneer)
<LI><a href="#[d8becc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat (via Veneer)
<LI><a href="#[d8ce08]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf (via Veneer)
<LI><a href="#[d8e3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_putstring
<LI><a href="#[d8e44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_command_write
<LI><a href="#[d8e500]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay
<LI><a href="#[d8e53c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_read
<LI><a href="#[d8e7d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;putSLcd
<LI><a href="#[d8e884]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendSMS
</UL>

<P><STRONG><a name="[d8e758]"></a>DTMF</STRONG> (ARM, 124 bytes, Stack size 0 bytes, main.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d8e6e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[d8e71c]"></a>getGps</STRONG> (ARM, 472 bytes, Stack size 16 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = getGps &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[d8bcec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[d8e2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart0_getkey
</UL>
<BR>[Called By]<UL><LI><a href="#[d8e6a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gprs_intil
<LI><a href="#[d8e6e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[d8e6e0]"></a>main</STRONG> (ARM, 1604 bytes, Stack size 8 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = main &rArr; lcd_putstring &rArr; lcd_gotoxy &rArr; lcd_command_write &rArr; wait_lcd
</UL>
<BR>[Calls]<UL><LI><a href="#[d8e230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart1_init
<LI><a href="#[d8e2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart0_init
<LI><a href="#[d8e3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_putstring
<LI><a href="#[d8e44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_command_write
<LI><a href="#[d8e488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_lcd
<LI><a href="#[d8e4c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_adc0
<LI><a href="#[d8e500]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay
<LI><a href="#[d8e71c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getGps
<LI><a href="#[d8e758]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DTMF
<LI><a href="#[d8e7d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;putSLcd
<LI><a href="#[d8e884]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendSMS
<LI><a href="#[d8e974]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_L
<LI><a href="#[d8e9b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_RE
<LI><a href="#[d8e9ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_F
<LI><a href="#[d8ea28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_stop
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtentry2.o(.ARM.Collect$$rtentry$$0000000D)
</UL>
<P><STRONG><a name="[d8e6a4]"></a>gprs_intil</STRONG> (ARM, 908 bytes, Stack size 16 bytes, main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d8bddc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy (via Veneer)
<LI><a href="#[d8becc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat (via Veneer)
<LI><a href="#[d8e1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart1_puts
<LI><a href="#[d8e1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart1_putc
<LI><a href="#[d8e44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_command_write
<LI><a href="#[d8e500]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay
<LI><a href="#[d8e71c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getGps
<LI><a href="#[d8e7d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;putSLcd
<LI><a href="#[d8e884]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendSMS
<LI><a href="#[d8e8fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recvResponse
</UL>

<P><STRONG><a name="[d8e668]"></a>recivecontr</STRONG> (ARM, 112 bytes, Stack size 8 bytes, main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d8e44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_command_write
<LI><a href="#[d8e500]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay
<LI><a href="#[d8e7d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;putSLcd
<LI><a href="#[d8e80c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;deleteSms
<LI><a href="#[d8e848]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getSMS
</UL>

<P><STRONG><a name="[d8dd44]"></a>sendchar</STRONG> (ARM, 80 bytes, Stack size 0 bytes, uart.o(.text), UNUSED)

<P><STRONG><a name="[d8e2e4]"></a>uart0_getkey</STRONG> (ARM, 32 bytes, Stack size 0 bytes, uart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d8e71c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getGps
</UL>

<P><STRONG><a name="[d8e26c]"></a>uart1_getkey</STRONG> (ARM, 32 bytes, Stack size 0 bytes, uart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d8e848]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getSMS
<LI><a href="#[d8e884]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendSMS
<LI><a href="#[d8e8fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recvResponse
</UL>

<P><STRONG><a name="[d8e230]"></a>uart1_init</STRONG> (ARM, 52 bytes, Stack size 0 bytes, uart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d8e6e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[d8e1f4]"></a>uart1_putc</STRONG> (ARM, 32 bytes, Stack size 0 bytes, uart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d8e1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart1_puts
<LI><a href="#[d8e6a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gprs_intil
<LI><a href="#[d8e884]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendSMS
<LI><a href="#[d8e8c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intGsm
</UL>

<P><STRONG><a name="[d8e1b8]"></a>uart1_puts</STRONG> (ARM, 40 bytes, Stack size 4 bytes, uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = uart1_puts
</UL>
<BR>[Calls]<UL><LI><a href="#[d8e1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart1_putc
</UL>
<BR>[Called By]<UL><LI><a href="#[d8e6a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gprs_intil
<LI><a href="#[d8e80c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;deleteSms
<LI><a href="#[d8e848]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getSMS
<LI><a href="#[d8e884]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendSMS
<LI><a href="#[d8e8c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intGsm
</UL>

<P><STRONG><a name="[d8e2a8]"></a>uart0_init</STRONG> (ARM, 52 bytes, Stack size 0 bytes, uart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d8e6e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[d8dd08]"></a>uart0_putc</STRONG> (ARM, 32 bytes, Stack size 0 bytes, uart.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[d8dccc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart0_puts
</UL>

<P><STRONG><a name="[d8dccc]"></a>uart0_puts</STRONG> (ARM, 40 bytes, Stack size 4 bytes, uart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d8dd08]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart0_putc
</UL>

<P><STRONG><a name="[d8d948]"></a>delay_1</STRONG> (ARM, 52 bytes, Stack size 0 bytes, lcd.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d8d90c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_lcd
<LI><a href="#[d8e44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_command_write
<LI><a href="#[d8e488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_lcd
</UL>

<P><STRONG><a name="[d8d90c]"></a>wait_lcd</STRONG> (ARM, 128 bytes, Stack size 4 bytes, lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = wait_lcd
</UL>
<BR>[Calls]<UL><LI><a href="#[d8d948]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_1
</UL>
<BR>[Called By]<UL><LI><a href="#[d8e410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_data_write
<LI><a href="#[d8e44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_command_write
</UL>

<P><STRONG><a name="[d8e44c]"></a>lcd_command_write</STRONG> (ARM, 216 bytes, Stack size 16 bytes, lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = lcd_command_write &rArr; wait_lcd
</UL>
<BR>[Calls]<UL><LI><a href="#[d8d90c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_lcd
<LI><a href="#[d8d948]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_1
</UL>
<BR>[Called By]<UL><LI><a href="#[d8d7e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_cmd
<LI><a href="#[d8d858]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_gotoxy
<LI><a href="#[d8d894]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_clear
<LI><a href="#[d8e488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_lcd
<LI><a href="#[d8e668]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recivecontr
<LI><a href="#[d8e6a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gprs_intil
<LI><a href="#[d8e6e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[d8e794]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_adc1
</UL>

<P><STRONG><a name="[d8d8d0]"></a>set_lcd_port_output</STRONG> (ARM, 56 bytes, Stack size 0 bytes, lcd.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d8e488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_lcd
</UL>

<P><STRONG><a name="[d8d894]"></a>lcd_clear</STRONG> (ARM, 20 bytes, Stack size 4 bytes, lcd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d8e44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_command_write
</UL>

<P><STRONG><a name="[d8d858]"></a>lcd_gotoxy</STRONG> (ARM, 96 bytes, Stack size 16 bytes, lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = lcd_gotoxy &rArr; lcd_command_write &rArr; wait_lcd
</UL>
<BR>[Calls]<UL><LI><a href="#[d8e44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_command_write
</UL>
<BR>[Called By]<UL><LI><a href="#[d8e3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_putstring
</UL>

<P><STRONG><a name="[d8e410]"></a>lcd_data_write</STRONG> (ARM, 164 bytes, Stack size 16 bytes, lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = lcd_data_write &rArr; wait_lcd
</UL>
<BR>[Calls]<UL><LI><a href="#[d8d90c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_lcd
</UL>
<BR>[Called By]<UL><LI><a href="#[d8d81c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_putchar
<LI><a href="#[d8e7d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;putSLcd
</UL>

<P><STRONG><a name="[d8d81c]"></a>lcd_putchar</STRONG> (ARM, 24 bytes, Stack size 8 bytes, lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = lcd_putchar &rArr; lcd_data_write &rArr; wait_lcd
</UL>
<BR>[Calls]<UL><LI><a href="#[d8e410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_data_write
</UL>
<BR>[Called By]<UL><LI><a href="#[d8e3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_putstring
</UL>

<P><STRONG><a name="[d8e3d4]"></a>lcd_putstring</STRONG> (ARM, 84 bytes, Stack size 20 bytes, lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = lcd_putstring &rArr; lcd_gotoxy &rArr; lcd_command_write &rArr; wait_lcd
</UL>
<BR>[Calls]<UL><LI><a href="#[d8d81c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_putchar
<LI><a href="#[d8d858]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_gotoxy
</UL>
<BR>[Called By]<UL><LI><a href="#[d8e6e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[d8e794]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_adc1
</UL>

<P><STRONG><a name="[d8e488]"></a>init_lcd</STRONG> (ARM, 56 bytes, Stack size 4 bytes, lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = init_lcd &rArr; lcd_command_write &rArr; wait_lcd
</UL>
<BR>[Calls]<UL><LI><a href="#[d8d8d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_lcd_port_output
<LI><a href="#[d8d948]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_1
<LI><a href="#[d8e44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_command_write
</UL>
<BR>[Called By]<UL><LI><a href="#[d8e6e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[d8d7e0]"></a>test_cmd</STRONG> (ARM, 52 bytes, Stack size 4 bytes, lcd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d8e44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_command_write
</UL>

<P><STRONG><a name="[d8e500]"></a>delay</STRONG> (ARM, 56 bytes, Stack size 0 bytes, delay.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d8e668]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recivecontr
<LI><a href="#[d8e6a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gprs_intil
<LI><a href="#[d8e6e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[d8e794]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_adc1
<LI><a href="#[d8e8c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intGsm
</UL>

<P><STRONG><a name="[d8e4c4]"></a>init_adc0</STRONG> (ARM, 48 bytes, Stack size 0 bytes, adc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d8e6e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[d8d204]"></a>init_adc1</STRONG> (ARM, 4 bytes, Stack size 0 bytes, adc.o(.text), UNUSED)

<P><STRONG><a name="[d8e53c]"></a>adc_read</STRONG> (ARM, 180 bytes, Stack size 0 bytes, adc.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[d8e794]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_adc1
</UL>

<P><STRONG><a name="[d8ce08]"></a>__2sprintf</STRONG> (Thumb, 36 bytes, Stack size 32 bytes, noretval__2sprintf.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d8b440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[d8b56c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>
<BR>[Called By]<UL><LI><a href="#[d8e794]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_adc1 (via Veneer)
</UL>

<P><STRONG><a name="[d8cc28]"></a>__printf</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, __printf.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d8bff8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_percent (via Veneer)
<LI><a href="#[d8cbb0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_call_via_r2
<LI><a href="#[d8cbec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_call_via_r1
</UL>
<BR>[Called By]<UL><LI><a href="#[d8b56c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>

<P><STRONG><a name="[d8cac0]"></a>_printf_int_dec</STRONG> (Thumb, 94 bytes, Stack size 32 bytes, _printf_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _printf_int_dec &rArr; _printf_int_common
</UL>
<BR>[Calls]<UL><LI><a href="#[d8b29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_udiv10 (via Veneer)
<LI><a href="#[d8b710]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[d8c9d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_unsigned (Weak Reference)
<LI><a href="#[d8ca0c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_signed (Weak Reference)
</UL>
<BR>[Called By]<UL><LI><a href="#[d8c0ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_d (via Veneer)
</UL>

<P><STRONG><a name="[d8becc]"></a>strcat</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, strcat.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[d8e6a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gprs_intil (via Veneer)
<LI><a href="#[d8e794]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_adc1 (via Veneer)
</UL>

<P><STRONG><a name="[d8bddc]"></a>strcpy</STRONG> (Thumb, 74 bytes, Stack size 12 bytes, strcpy.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[d8e6a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gprs_intil (via Veneer)
<LI><a href="#[d8e794]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_adc1 (via Veneer)
</UL>

<P><STRONG><a name="[d8bcec]"></a>strcmp</STRONG> (ARM, 156 bytes, Stack size 4 bytes, strcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[d8e71c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getGps
</UL>

<P><STRONG><a name="[d8bbfc]"></a>__use_two_region_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[d8bbc0]"></a>__rt_heap_escrow$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[d8bb84]"></a>__rt_heap_expand$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[d8b710]"></a>_printf_int_common</STRONG> (Thumb, 182 bytes, Stack size 40 bytes, _printf_intcommon.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_int_common
</UL>
<BR>[Calls]<UL><LI><a href="#[d8b698]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding (Weak Reference)
<LI><a href="#[d8b6d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding (Weak Reference)
<LI><a href="#[d8cbb0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_call_via_r2
</UL>
<BR>[Called By]<UL><LI><a href="#[d8cac0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[d8b56c]"></a>_printf_char_common</STRONG> (Thumb, 38 bytes, Stack size 72 bytes, _printf_char_common.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d8cc28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>
<BR>[Called By]<UL><LI><a href="#[d8ce08]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>

<P><STRONG><a name="[d8b440]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _sputc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d8ce08]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> noretval__2sprintf.o(.text)
</UL>
<P><STRONG><a name="[d8b29c]"></a>__rt_udiv10</STRONG> (ARM, 44 bytes, Stack size 0 bytes, rtudiv10.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d8cac0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec (via Veneer)
</UL>

<P><STRONG><a name="[d8a900]"></a>__user_setup_stackheap</STRONG> (ARM, 96 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[d89d0c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
<LI><a href="#[d8f5a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
</UL>
<BR>[Called By]<UL><LI><a href="#[d8ac84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[d8a798]"></a>exit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, exit.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[d89c1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit (via Veneer)
<LI><a href="#[d8a720]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_call_atexit_fns (Weak Reference)
</UL>
<BR>[Called By]<UL><LI><a href="#[d8aea0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[d89d48]"></a>__user_libspace</STRONG> (ARM, 12 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[d89d0c]"></a>__user_perproc_libspace</STRONG> (ARM, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d8a900]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[d89cd0]"></a>__user_perthread_libspace</STRONG> (ARM, 0 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[d87c3c]"></a>__rt_fp_status_addr</STRONG> (ARM, 16 bytes, Stack size 0 bytes, rt_fp_status_addr_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d881dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_init
</UL>

<P><STRONG><a name="[d879a8]"></a>_sys_exit</STRONG> (ARM, 20 bytes, Stack size 0 bytes, sys_exit.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d87f48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
</UL>

<P><STRONG><a name="[d87174]"></a>__I$use$semihosting</STRONG> (ARM, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> sys_exit.o(.text)
</UL>
<P><STRONG><a name="[d87138]"></a>__use_no_semihosting_swi</STRONG> (ARM, 4 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[d8cbec]"></a>__ARM_common_call_via_r1</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, __printf.o(i.__ARM_common_call_via_r1), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[d8cc28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[d8cbb0]"></a>__ARM_common_call_via_r2</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, __printf.o(i.__ARM_common_call_via_r2))
<BR><BR>[Called By]<UL><LI><a href="#[d8b710]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[d8cc28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[d881dc]"></a>_fp_init</STRONG> (ARM, 24 bytes, Stack size 8 bytes, fpinit.o(x$fpl$fpinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _fp_init
</UL>
<BR>[Calls]<UL><LI><a href="#[d87c3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_fp_status_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[d8a39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init (via Veneer)
</UL>

<P><STRONG><a name="[d881a0]"></a>__fplib_config_pureend_doubles</STRONG> (ARM, 0 bytes, Stack size unknown bytes, fpinit.o(x$fpl$fpinit), UNUSED)
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[d8f7c0]"></a>Undef_Handler</STRONG> (ARM, 4 bytes, Stack size unknown bytes, startup.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[d8f7c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Undef_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[d8f7c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Undef_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[d8f784]"></a>SWI_Handler</STRONG> (ARM, 4 bytes, Stack size unknown bytes, startup.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[d8f784]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[d8f784]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[d8f748]"></a>PAbt_Handler</STRONG> (ARM, 4 bytes, Stack size unknown bytes, startup.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[d8f748]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PAbt_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[d8f748]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PAbt_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[d8f70c]"></a>DAbt_Handler</STRONG> (ARM, 4 bytes, Stack size unknown bytes, startup.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[d8f70c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAbt_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[d8f70c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAbt_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[d8f6d0]"></a>IRQ_Handler</STRONG> (ARM, 4 bytes, Stack size unknown bytes, startup.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[d8f6d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[d8f6d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[d8f694]"></a>FIQ_Handler</STRONG> (ARM, 4 bytes, Stack size unknown bytes, startup.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[d8f694]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIQ_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[d8f694]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIQ_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[d8b5a8]"></a>_printf_input_char</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _printf_char_common.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> _printf_char_common.o(.text)
</UL><P>
<H3>
Undefined Global Symbols
</H3>
<P><STRONG><a name="[d8a720]"></a>_call_atexit_fns</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[d8a798]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[d8b6d4]"></a>_printf_post_padding</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[d8b710]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>

<P><STRONG><a name="[d8b698]"></a>_printf_pre_padding</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[d8b710]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>

<P><STRONG><a name="[d8ca0c]"></a>_printf_truncate_signed</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[d8cac0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[d8c9d0]"></a>_printf_truncate_unsigned</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[d8cac0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>
<HR></body></html>
